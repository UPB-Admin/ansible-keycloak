##
## This file is managed by ansible. Manual overrides may be overwritten
##

#---------------------------------------------------------------------
# Process-global settings
#---------------------------------------------------------------------
global
    maxconn            10000
    log                127.0.0.1 local0
    log                127.0.0.1 local1 notice
    user               haproxy
    group              haproxy
    chroot             {{ haproxy_chroot_dir }}
    pidfile            /var/run/haproxy/haproxy.pid
    stats socket       /var/run/haproxy/admin.sock mode 660 level admin

    # Configure SSL parameters for bind
    ssl-default-bind-ciphers {{ load_balancer_ssl_default_ciphers }}
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # Define SSL parameters for server
    ssl-default-server-ciphers {{ load_balancer_ssl_default_ciphers }}
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-dh-param-file {{ pki_dhparams_path }}

    daemon

#---------------------------------------------------------------------
# Common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode               http
    log                global
    option             httplog
    option             dontlognull
    option             forwardfor except 127.0.0.0/8
    option             redispatch
    retries            3
    timeout connect    10s
    timeout check      5s
    timeout client     300s
    timeout server     300s
    maxconn            5000

#---------------------------------------------------------------------
# Main cache used to store http requests and responses
#---------------------------------------------------------------------
cache main
    total-max-size {{ haproxy_cache_max_size }}
    max-object-size {{ haproxy_cache_max_object_size }}
    max-age {{ haproxy_cache_max_age }}

#---------------------------------------------------------------------
# main frontend which forwards to the backends
#---------------------------------------------------------------------
frontend  fe_main
    bind *:{{ load_balancer_http_port }}
    bind *:{{ load_balancer_https_port }} ssl crt {{ pki_dummy_certificate_crt_path }} crt {{ pki_certificate_crt_path }} alpn h2,http/1.1

    # Use the main cache for static content
    http-request cache-use main
    http-response cache-store main

    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

    # Check if the keycloak backend is accessed
    acl is_keycloak                 hdr(Host)       -m str {{ service_hostname_dns }}

{% if keycloak_path_prefix != "/" %}
    # Check if the location accessed is the root (/)
    acl is_root                     path            -m str /
    # Redirect / to the path prefix if needed for keycloak
    redirect location {{ keycloak_path_prefix }}/ code 302 if is_keycloak is_root
{% endif %}

    # Check whether the admin path is accessed, and where it is accessed from
    acl is_admin_console            path            -m beg {{ keycloak_path_prefix }}/admin
    # Verify if the source is trusted to access the admin console
    acl is_admin_allowed_source     src             {{ access_admin_allowed_sources | join(' ') }}

    # Accept connections to keycloak's admin console if they come from trusted sources
    # This will implicitly allow access for realm consoles to the admin trusted sources
    http-request                    allow           if is_keycloak is_admin_console is_admin_allowed_source

    # Verify if the source is trusted to access a realm admin console
{% for realm, sources in access_admin_realm_allowed_sources.items() %}
    acl is_realm_admin_console      path            -m beg {{ keycloak_path_prefix }}/admin/realms/{{ realm }}
    acl is_realm_admin_allowed_src  src             {{ sources | join(' ') }}

    http-request                    allow           if is_keycloak is_realm_admin_console is_realm_admin_allowed_src
{% endfor %}

    # Check whether the health endpoint is accessed, and where it is accessed from
    acl is_health_endpoint          path            -m beg {{ keycloak_path_prefix }}/health
    # Verify if the source is trusted to access the health endpoint
    acl is_health_allowed_source    src             {{ access_health_allowed_sources | join(' ') }}

    # Accept connections to keycloak's health endpoint if they come from trusted sources
    http-request                    allow           if is_keycloak is_health_endpoint is_health_allowed_source

    # Check whether the metrics endpoint is accessed, and where it is accessed from
    acl is_metrics_endpoint         path            -m beg {{ keycloak_path_prefix }}/metrics
    # Verify if the source is trusted to access the metrics endpoint
    acl is_metrics_allowed_source   src             {{ access_metrics_allowed_sources | join(' ') }}

    # Accept connections to keycloak's metrics endpoint if they come from trusted sources
    http-request                    allow           if is_keycloak is_metrics_endpoint is_metrics_allowed_source

    # Accept requests that do not access admin, health or metrics endpoints
    http-request                    allow           if is_keycloak !is_admin_console !is_health_endpoint !is_metrics_endpoint

    # Refuse connection if not explicitly allowed
    http-request                    silent-drop

    # Use the keycloak backend if the keycloak URL is accessed
    use_backend                     be_keycloak     if is_keycloak


#---------------------------------------------------------------------
# round robin balancing between the keycloak backends
#---------------------------------------------------------------------
backend be_keycloak
    balance            roundrobin

    # Create a stick table for requests based on cookies
    # If using high-availability the peers' tables must be synchronized (not currently implemented)
    stick-table type string len 128 size 1m expire 1h srvkey name
    # Store values for cookies set in both request and response
    stick on req.cook(AUTH_SESSION_ID)
    stick store-response res.cook(AUTH_SESSION_ID)

    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-Proto %[ssl_fc,iif(https,http)]

    default-server inter 5s check ssl verify required ca-file "{{ keycloak_trusted_certificate_path }}"
{% for server_name in groups["keycloak"] %}
    server {{ server_name }} {{ server_name }}:{{ keycloak_https_port }}
{% endfor %}

    option log-health-checks

# vim: ft=conf expandtab ts=4 sts=4 sw=4
