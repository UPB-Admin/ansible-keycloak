- name: Configure variables for server PKI configurations
  set_fact:
    pki_configs: |
      {% set service_config = pki_service_specific_configs[function] %}
      {% set root_dir = "/etc/pki/" + service_config.service_name %}
      {{
        pki_configs | default({}) | combine({function: {
          "root_dir": root_dir,
          "private_dir": root_dir + "/private",
          "trusted_dir": root_dir + "/trusted",

          "certificate_key_path": root_dir + "/private/server.key",
          "certificate_csr_path": root_dir + "/server.csr",
          "certificate_crt_path": root_dir + "/server.crt",
          "dhparams_path": root_dir + "/dhparams.pem",

          "file_owner": service_config.file_owner | default(pki_file_owner),
          "file_group": service_config.file_group | default(pki_file_group),
          "dir_mode": service_config.dir_mode | default(pki_dir_mode),
          "file_mode": service_config.file_mode | default(pki_file_mode),
          "key_type": service_config.key_type | default(pki_key_type),
          "key_size": service_config.key_size | default(pki_key_size),

          "country_name": service_config.country_name | default(pki_country_name),
          "organization_name": service_config.organization_name | default(pki_organization_name),
          "locality_name": service_config.locality_name | default(pki_locality_name),
          "common_name": service_config.common_name | default(function),
          "subject_alt_names": service_config.subject_alt_names | default([function] + groups[function]) | map('regex_replace', '^', 'DNS:') | list,
        }})
      }}
  with_items: "{{ group_names | intersect(pki_service_specific_configs.keys()) }}"
  loop_control:
    loop_var: function
    label: "{{ function }}"

- name: Print PKI configurations (for verbosity 2 or higher)
  debug:
    var: pki_configs
    verbosity: 2


- name: Create PKI file directories
  become: yes
  file:
    path: "{{ item[1][item.0] }}"
    state: directory
    mode: "{{ item[1].dir_mode }}"
    seuser: system_u
    setype: cert_t
  with_cartesian:
    - [ 'root_dir', 'private_dir', 'trusted_dir' ]
    - "{{ pki_configs.values() }}"
  loop_control:
    label: "{{ item[1][item.0] }}"
  notify: pki changed


- name: Create PKI certificate files
  include_tasks: create_pki_cert_files.yml
  when: inventory_hostname == function_groups[item.key].master
  with_dict: "{{ pki_configs }}"
  loop_control:
    label: "{{ item.key }}"


- name: Copy PKI certificate files from master servers
  include_tasks:
    file: copy_ssl_files.yml
    apply:
      tags: always
  with_cartesian:
    - "{{ copied_files }}"
    - "{{ pki_configs | dict2items }}"
  loop_control:
    label: "{{ item.1.value[item.0.key] }}"
  vars:
    copied_files:
      - key: certificate_key_path
      - key: certificate_csr_path
      - key: certificate_crt_path
        fact_key: pki_certificate


- name: Create Diffie-Helman parameters on first host and slurp contents
  become: yes
  run_once: yes
  when: not (pki_dhparams | default(""))
  block:
    - name: Find if the Diffie-Hellamn parameters have been generated for any service
      stat:
        path: "{{ item.value.dhparams_path }}"
      with_dict: "{{ pki_configs }}"
      loop_control:
        label: "{{ item.value.dhparams_path }}"
      register: pki_dhparams_stat

    - name: Create Diffie-Hellman parameters
      openssl_dhparam:
        path: "{{ pki_config.value.dhparams_path }}"
        size: "{{ pki_config.value.key_size }}"
        mode: "{{ pki_config.value.file_mode }}"
        state: present
      when: not (pki_dhparams_stat.results | map(attribute='stat.exists') is any)
      register: dhparams_generated
      vars:
        pki_config: "{{ pki_configs | dict2items | first }}"
      notify: pki changed

    - name: Slurp Diffie-Hellman parameters
      slurp:
        src: |-
          {% set paths = pki_dhparams_stat.results | json_query("[?stat.exists].stat.path") %}
          {{ paths[0] if paths | length > 0 else dhparams_generated.filename }}
      register: dhparams

    - name: Decode Diffie-Hellman parameters
      set_fact:
        pki_dhparams: "{{ dhparams.content | b64decode }}"


- name: Copy Diffie-Hellman parameters to all servers
  become: yes
  copy:
    content: "{{ pki_dhparams }}"
    dest: "{{ item.value.dhparams_path }}"
    mode: "{{ item.value.file_mode }}"
  with_dict: "{{ pki_configs }}"
  loop_control:
    label: "{{ item.value.dhparams_path }}"
  notify: pki changed
