- name: Keyclock server initial configurations
  become: yes
  block:
    - name: Create keycloak user
      user:
        name: "{{ keycloak_system_user }}"
        comment: Keycloak system user
        create_home: no
        home: /
        local: yes
        password_lock: yes
        shell: /sbin/nologin
        state: present
        system: yes

    - name: Set owner / group on PKI files
      file:
        state: directory
        recurse: yes
        path: "{{ pki_root_dir }}"
        owner: "{{ pki_file_owner }}"
        group: "{{ pki_file_group }}"
        seuser: system_u
        setype: cert_t

    - name: Install required packages
      package:
        name:
          - git
          - maven
          - python3-lxml
        state: latest


- name: Create keycloak server directory and install code
  become: yes
  block:
    - name: Check if keycloak install directory exists
      stat:
        path: "{{ keycloak_install_dir }}"
      register: keycloak_dir_stat

    - name: Download and extract keycloak
      when: not keycloak_dir_stat.stat.exists
      block:
      - name: Download keycloak server tar archive
        get_url:
          url: "{{ keycloak_archive_url }}"
          dest: "{{ keycloak_tmp_file }}"
          http_agent: "wget"
          checksum: "{{ keycloak_archive_checksum }}"
          timeout: 30
          mode: 0400
          owner: root
          group: root

      - name: Create keycloak directory if it does not exist
        file:
          path: "{{ keycloak_install_dir }}"
          state: directory
          mode: 0550
          owner: root
          group: "{{ keycloak_system_user }}"

      - name: Unarchive keycloak
        unarchive:
          src: "{{ keycloak_tmp_file }}"
          dest: "{{ keycloak_install_dir }}"
          extra_opts: [ "--strip-components=1" ]
          remote_src: yes
          owner: root
          group: "{{ keycloak_system_user }}"

      - name: Set permissions on keycloak directory
        file:
          path: "{{ keycloak_install_dir }}"
          state: directory
          recurse: yes
          mode: u=rX,g=rX,o-rwx

      - name: Create keycloak server data subdirectory if it does not exist
        file:
          path: "{{ keycloak_data_subdir }}"
          state: directory
          mode: 0770

      - name: Create keycloak server log subdirectory if it does not exist
        file:
          path: "{{ keycloak_log_subdir }}"
          state: directory
          mode: 0770

      - name: Grant Keycloak write permissions on bytecode file(s)
        become: yes
        block:
          - name: Allow keycloak to write in quarkus lib directory
            file:
              path: "{{ keycloak_quarkus_lib_subdir }}"
              state: directory
              mode: 0770

      - name: Recursively set owner / group on keycloak directory
        file:
          path: "{{ keycloak_install_dir }}"
          state: directory
          recurse: yes
          owner: root
          group: "{{ keycloak_system_user }}"

      - name: Remove keycloak archive
        file:
          path: "{{ keycloak_tmp_file }}"
          state: absent


- name: Add custom theme files
  become: yes
  when: keycloak_custom_theme | default(False)
  block:
    - name: Make sure custom theme git directory exists
      file:
        path: "{{ keycloak_custom_theme_repo_dir }}"
        state: directory
        mode: 0700
        owner: root
        group: root

    - name: Clone the git repository for the custom theme
      git:
        repo: "{{ keycloak_custom_theme.url }}"
        dest: "{{ keycloak_custom_theme_repo_dir }}"
        clone: yes
        update: yes
        version: "{{ keycloak_custom_theme.version }}"

    - name: Copy the custom theme to the keycloak directory
      copy:
        src: "{{ keycloak_custom_theme_src_dir }}/" # The trailing slash is important here, recursive copy
        dest: "{{ keycloak_custom_theme_dir }}"
        remote_src: yes
      notify:
        - delete theme cache
        - restart keycloak

    - name: Set permissions on themes directory
      file:
        path: "{{ keycloak_custom_theme_dir }}"
        state: directory
        recurse: yes
        mode: u=rX,g=rX,o-rwx
        owner: root
        group: "{{ keycloak_system_user }}"



- name: Set file ACLs on keycloak server files
  become: yes
  block:
    - name: Set default facl permissions on keycloak directory
      acl:
        path: "{{ keycloak_install_dir }}"
        default: yes
        etype: other
        permissions: 0
        recursive: yes
        state: present

    - name: Apply facl permissions on keycloak directory
      acl:
        path: "{{ keycloak_install_dir }}"
        etype: other
        permissions: 0
        recursive: yes
        state: present
      changed_when: False # Ignore; the files generated when the server is built always have permissions set for "other"


- name: Open firewall ports for keycloak
  become: yes
  block:
    - name: Allow connections to keycloak HTTP port from load balancer servers
      firewalld:
        zone: "{{ firewalld_internal_zone }}"
        rich_rule: "rule family='ipv4' source address='{{ hostvars[item].interfaces_internal_ip }}' port port='{{ keycloak_http_port }}' protocol='tcp' accept"
        state: enabled
        permanent: yes
        immediate: yes
      with_items:
        - "{{ groups['load_balancers'] }}"

    - name: Allow connections to keycloak HTTPS port from load balancer servers
      firewalld:
        zone: "{{ firewalld_internal_zone }}"
        rich_rule: "rule family='ipv4' source address='{{ hostvars[item].interfaces_internal_ip }}' port port='{{ keycloak_https_port }}' protocol='tcp' accept"
        state: enabled
        permanent: yes
        immediate: yes
      with_items:
        - "{{ groups['load_balancers'] }}"


- name: Configure keycloak for cross DC operation
  become: yes
  block:
    - name: Copy the certificate used by the infinispan servers
      copy:
        content: "{{ hostvars[function_groups['infinispan'].master]['pki_certificate'] }}"
        dest: "{{ infinispan_trusted_certificate_file }}"
        mode: 0400
        owner: "{{ pki_file_owner }}"
        group: "{{ pki_file_group }}"

    - name: Create java truststore with infinispan certificate
      java_cert:
        cert_path: "{{ infinispan_trusted_certificate_file }}"
        cert_alias: infinispan
        keystore_path: "{{ keycloak_truststore_file }}"
        keystore_pass: "{{ vault.keycloak.truststore.pass }}"
        keystore_create: yes
        keystore_type: JKS
        state: present
      notify: restart keycloak

    - name: Set file permissions on truststore file
      file:
        path: "{{ keycloak_truststore_file }}"
        state: file
        mode: 0440
        owner: root
        group: "{{ keycloak_system_user }}"

    - name: Copy the certificate used by the database servers
      copy:
        content: "{{ hostvars[function_groups['database'].master]['pki_certificate'] }}"
        dest: "{{ database_trusted_certificate_file }}"
        mode: 0440
        owner: "{{ pki_file_owner }}"
        group: "{{ keycloak_system_user }}"

    - name: Create java keystore based on PKI certificate and key
      openssl_pkcs12:
        action: export
        certificate_path: "{{ pki_certificate_crt_path }}"
        privatekey_path: "{{ pki_certificate_key_path }}"
        friendly_name: "{{ keycloak_keystore_cert_alias }}"
        path: "{{ keycloak_keystore_file }}"
        passphrase: "{{ vault.keycloak.keystore.pass }}"
        mode: 0440
        owner: root
        group: "{{ keycloak_system_user }}"
        state: present
      notify: restart keycloak

    - name: Add the keycloak configuration file
      template:
        src: keycloak.conf
        dest: "{{ keycloak_conf_file }}"
        mode: 0440
        owner: root
        group: "{{ keycloak_system_user }}"
      notify: restart keycloak

    - name: Add the infinispan clustering configuration file
      template:
        src: cache-ispn.xml
        dest: "{{ keycloak_infinispan_conf_file }}"
        mode: 0440
        owner: root
        group: "{{ keycloak_system_user }}"
      notify: restart keycloak


- name: Install Keycloak custom modules
  become: yes
  when: keycloak_custom_modules | default(False)
  block:
    - name: Prepare common files
      run_once: yes
      block:
        - name: Prepare custom modules repositories directory
          file:
            path: "{{ keycloak_custom_modules_repo_root_dir }}"
            state: directory
            mode: 0750
            owner: root
            group: "{{ keycloak_system_user }}"

        - name: Create maven settings XML file
          template:
            src: maven_settings.xml
            dest: "{{ keycloak_maven_settings_xml }}"
            mode: 0640
            owner: root
            group: "{{ keycloak_system_user }}"

        - name: Create maven repository directory
          file:
            path: "{{ keycloak_maven_repo_dir }}"
            state: directory
            mode: 0770
            owner: root
            group: "{{ keycloak_system_user }}"

    - name: Install custom modules
      include_tasks: install_custom_module.yml
      with_items: "{{ keycloak_custom_modules }}"
      loop_control:
        loop_var: keycloak_custom_module
        label: "{{ keycloak_custom_module.name }}"


- name: Configure keycloak service
  become: yes
  block:
    - name: Add keycloak systemd service file
      template:
        src: keycloak.service
        dest: "{{ systemd_service_dir }}/keycloak.service"
        mode: 0640
        owner: root
        group: root
      notify:
        - systemd reload
        - restart keycloak


- name: Build the Keycloak server image
  become: yes
  become_user: "{{ keycloak_system_user }}"
  command:
    argv: [ "{{ keycloak_server_script_file }}", "build" ]
  vars:
    ansible_remote_tmp: "/tmp/${USER}/.ansible"
  changed_when: False # Ignore; there is no way to tell if the script actually changes files without keeping track of them individually


- name: Start Keycloak for a limited time to create the admin user if it does not exist
  become: yes
  become_user: "{{ keycloak_system_user }}"
  when: not (hostvars[function_groups['database'].master]['keycloak_admin_exists'] | default(True))
  run_once: yes
  command:
    argv: [ "/usr/bin/timeout", "-k30s", "{{ keycloak_admin_create_timeout }}", "{{ keycloak_server_script_file }}", "-Djboss.site.name='{{ keycloak_site_name }}'", "start", "--optimized" ]
  environment:
    KEYCLOAK_ADMIN: admin
    KEYCLOAK_ADMIN_PASSWORD: "{{ vault.keycloak.user.admin.pass }}"
  register: first_boot
  failed_when: first_boot.rc != 124
  vars:
    ansible_remote_tmp: "/tmp/${USER}/.ansible"


- name: Mark Keycloak for restart when Infinispan was restarted
  debug:
    msg: "Notify restart of keycloak service"
  when: keycloak_cluster_infinispan_servers | map("extract", hostvars) | selectattr("infinispan_restarted") | list | length > 0
  changed_when: True
  notify: restart keycloak


- name: Mark Keycloak service for restart if the PKI files have changed
  when: pki_changed
  debug:
    msg: "Notify restart of keycloak service"
  changed_when: True
  notify: restart keycloak


- name: When upgrading restart Keycloak on the first server only to migrate the database
  become: yes
  when: hostvars[function_groups['database'].master]['keycloak_upgrading'] | default(False)
  run_once: yes
  block:
    - name: Restart Keycloak immediately
      systemd:
        name: keycloak
        state: restarted

    - name: Wait until the keycloak service finishes booting
      wait_for:
        port: "{{ keycloak_https_port }}"
        host: "{{ inventory_hostname }}"
        timeout: "{{ service_start_timeout }}"
        msg: "Keycloak did not start after {{ service_start_timeout }} seconds"
        state: started


- name: Restart keycloak if required, make sure it's started
  become: yes
  block:
    - name: Force flush handlers to reload / restart keycloak service
      meta: flush_handlers

    - name: Make sure the keycloak service is running
      systemd:
        name: keycloak
        state: started
        enabled: yes

    - name: Wait until the keycloak service finishes booting
      wait_for:
        port: "{{ keycloak_https_port }}"
        host: "{{ inventory_hostname }}"
        timeout: "{{ service_start_timeout }}"
        msg: "Keycloak did not start after {{ service_start_timeout }} seconds"
        state: started
