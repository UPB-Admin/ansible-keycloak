keycloak_version: 23.0.6

# Interfaces, available to the server
# In case there is more than one interface, the correct internal/external interfaces should be set
interfaces_internal_name: "{{ ansible_facts.default_ipv4.interface }}"
interfaces_external_name: "{{ ansible_facts.default_ipv4.interface }}"

interfaces_internal_ip: "{{ ansible_facts[interfaces_internal_name].ipv4.address }}"
interfaces_external_ip: "{{ ansible_facts[interfaces_external_name].ipv4.address }}"

# Names of firewall(d) zones
# The DMZ zone is used only if more than one interface is present on the server
firewalld_internal_zone: keycloak
firewalld_dmz_zone: dmz
firewalld_has_external: "{{ interfaces_internal_name != interfaces_external_name }}"
firewalld_external_zone: "{{ firewalld_dmz_zone if firewalld_has_external else firewalld_internal_zone }}"

# Variable used to keep track of whether PKI files have been updated
pki_changed: False

# Type of load balancer to use. Can be either nginx or HAProxy
load_balancer_service: nginx

# Prefix added to all Keycloak paths
keycloak_path_prefix: /auth

# Public HTTP connection ports
load_balancer_http_port: 80
load_balancer_https_port: 443

# Ports Keycloak listens on. Must be the same between Keycloak (server) and the
# load balancers (clients)
keycloak_http_port: 8080
keycloak_https_port: 8443

# port 11222 is used by default for the hot rod protocol. Is common for
# Infinispan (server) and Keycloak (client)
infinispan_hotrod_port: 11222
# port 7800 is used by default for cluster communication (tcpping)
infinispan_tcpping_port: 7800

# Metrics port for infinispan status - is proxied through an nginx reverse proxy
# This must be a valid httpd_port_t value for SELinux
# Alternately nginx will fail to start, as binding would be blocked by SELinux
infinispan_metrics_proxy_port: 9000

# Ports LDAP servers listen on
ldap_listen_port: 389        # server port for non-secure connections
ldap_secure_listen_port: 636 # server port for secure connections

# Keycloak does not officially support utf8mb4 encoding currently
database_config:
  keycloak:
    dbname: keycloak
    username: keycloak
    encoding: utf8mb3
  infinispan:
    dbname: infinispan
    username: infinispan
    encoding: utf8mb4

database_listen_port: 3306
database_unix_socket: /var/lib/mysql/mysql.sock
# Ports used by MariaDB + Galera for database replication
database_galera_replication_port: 4567
database_galera_ist_port: 4568
database_galera_sst_port: 4444

# Caches with their respective cache types (from keycloak's point of view;
# infinispan creates all caches as replicated caches)
infinispan_caches:
  work: replicated
  sessions: distributed
  clientSessions: distributed
  offlineSessions: distributed
  offlineClientSessions: distributed
  loginFailures: distributed
  actionTokens: distributed
  authenticationSessions: distributed

# User used by keycloak to connect to the infinispan cluster
infinispan_keycloak_user: keycloak

# Function groups - group of nodes that perform operations
function_groups:
  database:
    master: "{{ groups.database[0] }}"
  infinispan:
    master: "{{ groups.infinispan[0] }}"
  keycloak:
    master: "{{ groups.keycloak[0] }}"
  ldap:
    master: "{{ (groups.ldap | default(['']))[0] }}"
  load_balancers:
    master: "{{ groups.load_balancers[0] }}"

java_services:
  - infinispan
  - keycloak

# Number of Java services on the server - will have to split resources
java_num_services_installed: "{{ java_services | intersect(group_names) | length }}"

# Amount of memory the database can use
# If a database should not run on the system it will use 0% of memory
# Use 33% of memory if the database runs on the same server as a Java service, or 50% otherwise
database_mem_buffer_percent: "{{ ('database' not in group_names) | ternary(0, (java_num_services_installed|int > 0) | ternary(1/3, 1/2)) }}"
database_mem_buffer_size: "{{ ansible_memtotal_mb * database_mem_buffer_percent|float }}"


# List of node clusters. They MUST be named "cluster_*" - e.g. "cluster_1", "cluster_2"
node_clusters: "{{ groups | select('match', 'cluster_*') | list }}"

cluster_servers:
  keycloak: "{{ groups.keycloak | intersect(groups[cluster_name]) }}"
  infinispan: "{{ groups.infinispan | intersect(groups[cluster_name]) }}"
  database: "{{ groups.database | intersect(groups[cluster_name]) }}"
  ldap: "{{ groups.ldap | intersect(groups[cluster_name]) }}"

# Array containing IPs of hosts that can access the admin console
access_admin_allowed_sources: []

# Dictionary containing IPs of hosts that can access realms' admin console
# e.g., OIDC client service accounts.
access_admin_realm_allowed_sources: {}

# List of prometheus servers that can access the nodes
prometheus_servers: []
# Whether to monitor services using Prometheus
prometheus_monitor: "{{ prometheus_servers | length > 0 }}"
# Exporters to install on the nodes
prometheus_service_specific_exporters:
  database: ["node", "database"]
  infinispan: ["node"]
  keycloak: ["node"]
  ldap: ["node"]
  load_balancers: ["node", "haproxy"]

prometheus_exporters_to_install: "{{ prometheus_service_specific_exporters | dict2items | selectattr('key', 'in', group_names) | map(attribute='value') | list | flatten | unique }}"

prometheus_node_exporter_version: 1.7.0
prometheus_database_exporter_version: 0.15.0
prometheus_haproxy_exporter_version: 0.12.0

prometheus_exporters:
  node:
    archive: "https://github.com/prometheus/node_exporter/releases/download/v{{ prometheus_node_exporter_version }}/node_exporter-{{ prometheus_node_exporter_version }}.linux-amd64.tar.gz"
    checksum: sha256:a550cd5c05f760b7934a2d0afad66d2e92e681482f5f57a917465b1fba3b02a6
    tmp_file: "/tmp/prometheus-node_exporter-{{ prometheus_node_exporter_version }}.tar.gz"
    install_dir: "/opt/prometheus/node_exporter-{{ prometheus_node_exporter_version }}"
    port: 9100

  database:
    archive: "https://github.com/prometheus/mysqld_exporter/releases/download/v{{ prometheus_database_exporter_version }}/mysqld_exporter-{{ prometheus_database_exporter_version }}.linux-amd64.tar.gz"
    checksum: sha256:3973db1c46b0323a957a43916b759ee71ddab9096958ce78401fdff894b0dc51
    tmp_file: "/tmp/prometheus-database_exporter-{{ prometheus_database_exporter_version }}.tar.gz"
    install_dir: "/opt/prometheus/database_exporter-{{ prometheus_database_exporter_version }}"
    port: 9104
    conf_file: /etc/.mysqld_exporter.cnf
    prereq_tasks: setup_database_exporter.yml

  haproxy:
    archive: "https://github.com/prometheus/haproxy_exporter/releases/download/v{{ prometheus_haproxy_exporter_version }}/haproxy_exporter-{{ prometheus_haproxy_exporter_version }}.linux-amd64.tar.gz"
    checksum: sha256:41d797bc7d54023ea0ea23e58be5795a0947289d3d33beab3372c52e4fcbb298
    tmp_file: "/tmp/prometheus-haproxy_exporter-{{ prometheus_haproxy_exporter_version }}.tar.gz"
    install_dir: "/opt/prometheus/haproxy_exporter-{{ prometheus_haproxy_exporter_version }}"
    port: 9101
    extra_cond: "{{ load_balancer_service == 'haproxy' }}"

# rsyslog remote servers
rsyslog_log_servers: []
# CA certificate for rsyslog log servers
rsyslog_log_server_ca_certificate: ""

# Whether set up rsyslog
rsyslog_configure: "{{ rsyslog_log_servers | length > 0 }}"

database_system_user: mysql
infinispan_system_user: infinispan
keycloak_system_user: keycloak
prometheus_system_user: prometheus

# vim: ft=yaml
